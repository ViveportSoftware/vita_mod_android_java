buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
    }
}

plugins {
    id 'maven-publish'
}

ext.buildType = System.getenv('BUILD_TYPE')
if (ext.buildType == null) {
    ext.buildType = 'debug'
}

ext.buildNumber = System.getenv('BUILD_NUMBER')
if (ext.buildNumber == null) {
    ext.buildNumber = '9999'
}

ext.buildMavenServerUrl = System.getenv('BUILD_MAVEN_SERVER_URL')
if (ext.buildMavenServerUrl == null) {
    ext.buildMavenServerUrl = 'NOTSET'
}

ext.buildMavenCredentialUsername = System.getenv('BUILD_MAVEN_CREDENTIAL_USERNAME')
if (ext.buildMavenCredentialUsername == null) {
    ext.buildMavenCredentialUsername = 'NOTSET'
}

ext.buildMavenCredentialPassword = System.getenv('BUILD_MAVEN_CREDENTIAL_PASSWORD')
if (ext.buildMavenCredentialPassword == null) {
    ext.buildMavenCredentialPassword = 'NOTSET'
}

ext.revision = '-SNAPSHOT'
if ('release' == ext.buildType) {
    ext.revision = '.' + ext.buildNumber
}

group 'com.htc.vita'
version '0.1' + ext.revision

project.buildDir = 'temp'

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://dl.bintray.com/viveportsoftware/maven-public'
        }
        maven {
            url 'https://www.myget.org/F/viveportsoftware/maven'
        }
    }
}

apply plugin: 'com.android.library'

// from plugin 'com.android.library'
android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        consumerProguardFiles 'proguard-consumer.txt'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            manifest.srcFile 'source/main/AndroidManifest.xml'
            java.srcDirs = ['source/main/java']
            jniLibs.srcDirs = ['source/main/libs']
            resources.srcDirs = ['source/main/res']
            aidl.srcDirs = ['source/main/java']
            renderscript.srcDirs = ['source/main/java']
            res.srcDirs = ['source/main/res']
            assets.srcDirs = ['source/main/assets']
        }

        androidTest {
            manifest.srcFile 'source/androidTest/AndroidManifest.xml'
            java.srcDirs = ['source/androidTest/java']
            jniLibs.srcDirs = ['source/androidTest/libs']
            resources.srcDirs = ['source/androidTest/res']
            aidl.srcDirs = ['source/androidTest/java']
            renderscript.srcDirs = ['source/androidTest/java']
            res.srcDirs = ['source/androidTest/res']
            assets.srcDirs = ['source/androidTest/assets']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude '.readme'
    }
}

afterEvaluate {
    generateReleaseBuildConfig.enabled = false
    generateDebugBuildConfig.enabled = false
    generateReleaseResValues.enabled = false
    generateDebugResValues.enabled = false
}

dependencies {
    implementation 'com.htc.vita:core:0.1.16'
    testImplementation 'junit:junit:4.12'

    // from plugin 'com.android.library'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

publish {
    dependsOn assemble
}

// from plugin 'maven-publish'
publishing {
    publications {
        mavenAndroid(MavenPublication) {
            artifacts {
                groupId "${project.group}"
                artifactId "${rootProject.name}"
                version "${project.version}"

                // append dependencies into pom.xml
                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.compile.allDependencies.each {
                        if (it instanceof org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }

                // from plugin 'com.android.library'
                def buildType = 'release'
                if (project.version.endsWith('-SNAPSHOT')) {
                    buildType = 'debug'
                }
                // artifact "temp/outputs/aar/${rootProject.name}-${project.version}.aar"
                artifact "temp/intermediates/packaged-classes/${buildType}/classes.jar"
            }
        }
    }
    repositories {
        if ('NOTSET' != project.ext.buildMavenServerUrl
                && 'NOTSET' != project.ext.buildMavenCredentialUsername
                && 'NOTSET' != project.ext.buildMavenCredentialPassword) {
            maven {
                credentials {
                    username project.ext.buildMavenCredentialUsername
                    password project.ext.buildMavenCredentialPassword
                }
                url project.ext.buildMavenServerUrl
            }
        }
    }
}
